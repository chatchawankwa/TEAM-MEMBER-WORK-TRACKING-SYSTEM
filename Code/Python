"""
# ===== 1. ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (Import Libraries) =====
"""
import saspy
import pandas as pd
import pyodbc
import requests
import traceback
import numpy as np
import warnings
import re
import os

from datetime import datetime

warnings.filterwarnings('ignore', category=UserWarning)

"""
# ===== 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (File and Date Management Functions) =====
"""
def get_file_modified_date(file_path):
    timestamp = os.path.getmtime(file_path)
    return datetime.fromtimestamp(timestamp)

def format_date_column(data, column_name):
    if column_name in data.columns:
        data[column_name] = pd.to_datetime(data[column_name], errors='coerce')
        data[column_name] = data[column_name].apply(lambda x: x.strftime('%Y-%m-%d') if pd.notnull(x) else 'Unknown Date')

"""
# ===== 3. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡πà‡∏≤‡∏ô Line (Line Notification Function) =====
"""
def send_line_notification(token, message, sticker_package_id=None, sticker_id=None):
    url = "https://notify-api.line.me/api/notify"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/x-www-form-urlencoded"}
    data = {"message": message}
    if sticker_package_id and sticker_id:
        data["stickerPackageId"] = sticker_package_id
        data["stickerId"] = sticker_id
    response = requests.post(url, headers=headers, data=data)
    print(f"LINE notification sent: {response.status_code}")


"""
# ===== 4. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Helper Functions for Data Management) =====
"""
def escape_single_quotes(value): #‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà 'Hi ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô 'Hi'
    if isinstance(value, str):
        return value.replace("'", "''")
    return value

def format_alert_message(No, old_date, new_date): #‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    return f" No: {No}\n - From: {old_date} ‚û°Ô∏è To: {new_date}"

"""
# ===== 5. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à (Task Incentive Update Function) =====
"""
def update_task_incentive(excel_file_path, user_name, usercheck, animal_emoji): #‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Update ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤database
    messages = []
    try:
        data = pd.read_excel(excel_file_path, skiprows=0)
        data.replace('nan', np.nan, inplace=True)  # Replace 'nan' string with np.nan if any
        data.dropna(subset=['Task'], inplace=True) # ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Task
        if 'No' in data.columns:
            data['No'] = data['No'].apply(lambda x: str(int(x)) if pd.notna(x) and isinstance(x, (int, float)) else str(x).strip())

            data.dropna(subset=['No'], inplace=True)
            data['No'] = usercheck + data['No'].str.zfill(2)
            date_columns = ['Due Date', 'Plan Start Date', 'Plan End Date']
            for col in date_columns:
                format_date_column(data, col)
               
            data['Status'] = data['Status'].str.upper()
            data = data.astype(str)
            # Escape single quotes in all string fields
            for col in data.select_dtypes(include=[object]).columns:
                data[col] = data[col].map(escape_single_quotes)
           
            sas = saspy.SASsession(cfgname='YOUR_SAS_CONFIG_NAME')
            
            #‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á SAS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ Database
            libname_statement = """
            LIBNAME SQLSVR
                DATASRC=YOUR_DATABASE_CONNECTION_STRING
                SCHEMA=dbo
                AUTHDOMAIN=YOUR_AUTH_DOMAIN;
            """
            sas.submit(libname_statement)
            modified_date = get_file_modified_date(excel_file_path).strftime('%Y-%m-%d %H:%M:%S')

            for index, row in data.iterrows():#‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô row ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                update_query = f"""
                PROC SQL;
                    CONNECT TO SQLSVR AS DB_CONN (DATASRC=YOUR_DATABASE_CONNECTION_STRING AUTHDOMAIN=YOUR_AUTH_DOMAIN);
                    CREATE TABLE WORK.UpdateResult AS
                    SELECT *, '{row['Due Date']}' AS NewDueDate
                    FROM CONNECTION TO DB_CONN (
                        EXEC dbo.sp_SPname
                            @No = '{row['No']}' ,
                            @Type = '{row['Type']}' ,
                            @Task = '{row['Task']}' ,
                            @DueDate = '{row['Due Date']}' ,
                            @Status = '{row['Status']}' ,
                            @Owner = '{row['Owner']}' ,
                            @PlanStartDate = '{row['Plan Start Date']}' ,
                            @PlanEndDate = '{row['Plan End Date']}' ,
                            @Remark = '{row['Remark']}' ,
                            @Time = '{row['Time']}' ,
                            @Percent = '{row['Percent']}' ,
                            @ModifiedDate = '{modified_date}' ,
                            @OperationType = 'U'
                    );
                    DISCONNECT FROM DB_CONN;
                QUIT;
                """
                result = sas.submit(update_query)
                update_result = sas.sasdata('UpdateResult', 'WORK').to_df()
               
                if not update_result.empty and 'OldDueDate' in update_result.columns:
                    old_due_date = update_result.at[0, 'OldDueDate']
                    new_due_date = update_result.at[0, 'NewDueDate']
                    if old_due_date != new_due_date and new_due_date != 'Unknown Date':
                        message = format_alert_message(row['No'], old_due_date, new_due_date)
                        messages.append(message)

    except Exception as e:
        print("An error occurred during database connection test:")
        print(e)
    finally:
        # ‡∏õ‡∏¥‡∏î SAS session
        if 'sas' in locals():
            sas.endsas()
        # Send accumulated messages
        if messages:
            full_message = f"{animal_emoji} *User:* {user_name}  {animal_emoji}{animal_emoji}\n*Alerts* ??: Due Date Change\n" + "\n".join(messages)
            send_line_notification(CONFIG['line_token'], full_message)

"""
# ===== 6. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏á‡∏≤‡∏ô (Task Processing Function) =====
"""
def process_tasks(user_name, usercheck, animal_emoji, line_token):
    print(f"{animal_emoji} User: {user_name}\nüö® Alerts: Due Date Change")
    messages = []
    try:
        sas = saspy.SASsession(cfgname='YOUR_SAS_CONFIG_NAME')
       
        # Execute the stored procedure to retrieve tasks
        libname_statement = """
        LIBNAME SQLSVR
            DATASRC=YOUR_DATABASE_CONNECTION_STRING
            SCHEMA=dbo
            AUTHDOMAIN=YOUR_AUTH_DOMAIN;
        """
        sas.submit(libname_statement)
       
        proc_sql_query = """
        PROC SQL;
            CONNECT TO SQLSVR AS DB_CONN (DATASRC=YOUR_DATABASE_CONNECTION_STRING AUTHDOMAIN=YOUR_AUTH_DOMAIN);
            CREATE TABLE WORK.TaskResults AS
            SELECT *
            FROM CONNECTION TO DB_CONN (
                EXEC sp_SPname @OperationType = 'R'
            );
            DISCONNECT FROM DB_CONN;
        QUIT;
        """
        sas.submit(proc_sql_query)
       
        # Retrieve the results from the SAS work library
        task_results = sas.sasdata('TaskResults', 'WORK')
        results = task_results.to_df()

        current_datetime = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        tasks_by_category = {
            'üî• Overdue tasks:': [],
            'üö® Tasks due today:': [],
            '‚è∞ Tasks due soon:': [],
            'üÜï‚ùó New tasks Over starting:': [],
            'üÜï New tasks starting today:': [],
            'üÜï New tasks starting soon:': []
        }

        for index, result in results.iterrows():
            prefix = re.split(r'(\d+)', result['No'])[0] #‡∏ï‡∏±‡∏î‡∏ï‡∏±‡∏ß User check ‡∏≠‡∏≠‡∏Å‡πÄ‡∏ä‡πà‡∏ô B01 = B ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
            if usercheck == prefix:
                try:
                    due_date = datetime.strptime(result['Due Date'], '%Y-%m-%d')
                    plan_start = datetime.strptime(result['Plan Start Date'], '%Y-%m-%d')  # Assuming Plan Start Date is at index 4
                except ValueError:
                    continue  # Skip this result if the date format is incorrect
                   
                days_difference = (due_date - current_datetime).days    
                #‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏áduedate ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏•‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                day_Newdifference = (plan_start - current_datetime).days 
                #‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏áplan_start ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡∏•‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                task_detail = f"- Task: {result['Task']}, Status: {result['Status']}"

                if result['Status'] == 'DOING':
                    if days_difference < 0:
                        task_detail += f", Overdue by {-days_difference} days"
                        tasks_by_category['üî• Overdue tasks:'].append(task_detail)
                    elif days_difference == 0:
                        task_detail += ", Due Today"
                        tasks_by_category['üö® Tasks due today:'].append(task_detail)
                    elif days_difference > 0:
                        task_detail += f", Due in {days_difference} days"
                        tasks_by_category['‚è∞ Tasks due soon:'].append(task_detail)
               
                elif result['Status'] == 'NEW':
                    if day_Newdifference < 0:
                        new_task_detail = task_detail + f", Over Plan Starts in {day_Newdifference} days"
                        tasks_by_category['üÜï‚ùó New tasks Over starting:'].append(new_task_detail)
                    elif day_Newdifference == 0:
                        new_task_detail = task_detail + ", Starts Today"
                        tasks_by_category['üÜï New tasks starting today:'].append(new_task_detail)
                    elif day_Newdifference > 0:
                        new_task_detail = task_detail + f", Starts in {day_Newdifference} days"
                        tasks_by_category['üÜï New tasks starting soon:'].append(new_task_detail)
       
        message_lines = [f" User: {user_name} - Task Updates {animal_emoji} {animal_emoji} {animal_emoji}"]
        for category, tasks in tasks_by_category.items():
            if tasks:
                message_lines.append(f"{category}")
                message_lines.extend(tasks)
                message_lines.append('---------------------------------')  # Visual separator after each category

        full_message = "\n".join(message_lines)
        send_line_notification(CONFIG['line_token'], full_message)

    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        # Send accumulated messages
        for message in messages:
            send_line_notification(line_token, message)
        if 'sas' in locals():
            sas.endsas()

"""
# ===== 7. ‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô (Configuration and Function Calls) =====
"""
CONFIG = {
    'line_token': 'YOUR_LINE_TOKEN_HERE',
}

if __name__ == "__main__":
    user_configs = [
        {'path': 'path/to/your/excel/file.xlsx', 'user_name': 'User1', 'usercheck': 'M', 'animal_emoji': 'üê±'},
        {'path': 'path/to/your/excel/file2.xlsx', 'user_name': 'User2', 'usercheck': 'B', 'animal_emoji': 'üêï'},
    ]

    # Process each user's task
    for config in user_configs:
        update_task_incentive(config['path'], config['user_name'], config['usercheck'], config['animal_emoji'])
        process_tasks(config['user_name'], config['usercheck'], config['animal_emoji'], CONFIG['line_token'])

"""
# ===== 8. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Import Task Data Functions) =====
"""
def ImportDataTaskWork(sas):
    try:
        sas_code = """
        PROC SQL;
        CONNECT TO SQLSVR AS myconn (DATASRC=YOUR_DATABASE_CONNECTION_STRING AUTHDOMAIN=YOUR_AUTH_DOMAIN);
        CREATE TABLE WORK.TaskData AS
        SELECT *
        FROM CONNECTION TO myconn (
            EXEC sp_SPname @OperationType = 'C'
        );
        DISCONNECT FROM myconn;
        QUIT;
        """
        sas.submit(sas_code)
        df = sas.sasdata('TaskData', 'WORK').to_df()

        processed_data = []
        for _, row in df.iterrows():
            row_list = list(row)
            task_value = row_list[df.columns.get_loc('Task')]

            # ‡πÉ‡∏ä‡πâ regex ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ ID
            pattern = re.compile(r'[S|s]\d{8} >> Refer S\d{8}')
            match = pattern.search(task_value)
            if match:
                refer_id = re.search(r'Refer ([S|s]\d{8})', task_value)
                IDsmartcare = refer_id.group(1) if refer_id else ''
            else:
                match = re.search(r'[S|s]\d{8}', task_value)
                IDsmartcare = match.group(0) if match else ''

            row_list.append(IDsmartcare)
            processed_data.append(row_list)

        df_processed = pd.DataFrame(processed_data, columns=list(df.columns) + ['IDsmartcare'])
        return df_processed

    except Exception as e:
        print(f"An error occurred: {e}")
        traceback.print_exc()
        return pd.DataFrame()

def ImportDataTaskUser(sas, columns_to_select=None):
    try:
        select_columns = ', '.join(columns_to_select) if columns_to_select else '*'

        sas_code = f"""
        PROC SQL;
        CONNECT TO SQLSVR AS myconn (DATASRC=YOUR_DATABASE_CONNECTION_STRING AUTHDOMAIN=YOUR_AUTH_DOMAIN);
        CREATE TABLE WORK.TasklistEmp AS
        SELECT {select_columns}
        FROM CONNECTION TO myconn (
            SELECT {select_columns} FROM Employee_Table
        );
        DISCONNECT FROM myconn;
        QUIT;
        """
        sas.submit(sas_code)
        df = sas.sasdata('TasklistEmp', 'WORK').to_df()
        return df

    except Exception as e:
        print(f"An error occurred: {e}")
        traceback.print_exc()
        return pd.DataFrame()

"""
# ===== 9. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DataFrame (Create SQL Table from DataFrame) =====
"""
def create_sql_table_from_df(sas, df, table_name):
    try:
        # Establish connection to SQL Server using LIBNAME
        libname_statement = """
            LIBNAME SQLSVR
            DATASRC=YOUR_DATABASE_CONNECTION_STRING
            SCHEMA=dbo
            AUTHDOMAIN=YOUR_AUTH_DOMAIN;
        """
        sas.submit(libname_statement)
        print(f"Total rows in DataFrame: {len(df)}")

        for index, row in df.iterrows():
            print(f"Processing row {index+1}/{len(df)}")

            # Escaping single quotes in the data to prevent SQL errors
            row_escaped = row.apply(lambda x: str(x).replace("'", "''") if pd.notnull(x) else '')

            # Formatting specific date fields correctly
            work_completed = f"'{row_escaped['Work Completed']}'" if row_escaped['Work Completed'] != '' else 'NULL'
            start_record_date = f"'{row_escaped['Start_Record_Date']}'" if row_escaped['Start_Record_Date'] != '' else 'NULL'
            
            # SQL to call the stored procedure with the parameters from the DataFrame row
            sp_call = f"""
            PROC SQL;
                CONNECT TO SQLSVR AS DB_CONN (DATASRC=YOUR_DATABASE_CONNECTION_STRING  AUTHDOMAIN=YOUR_AUTH_DOMAIN);
                EXECUTE (
                    EXEC dbo.sp_SPname
                        @No = '{row_escaped['No']}',
                        @Type = '{row_escaped['Type']}',
                        @IDsmartcare = '{row_escaped['IDsmartcare']}',
                        @Task = '{row_escaped['Task']}',
                        @DueDate = '{row_escaped['Due Date']}',
                        @Status = '{row_escaped['Status']}',
                        @Owner = '{row_escaped['Owner']}',
                        @PlanStartDate = '{row_escaped['Plan Start Date']}',
                        @PlanEndDate = '{row_escaped['Plan End Date']}',
                        @Remark = '{row_escaped['Remark']}',
                        @Time = '{row_escaped['Time']}',
                        @Percent = '{row_escaped['Percent']}',
                        @WorkCompleted = {work_completed},
                        @ModifiedDate = '{row_escaped['Modified Date']}',
                        @StartRecordDate = {start_record_date},
                        @EMPID = '{row_escaped['EMPID']}',
                        @fname_eng = '{row_escaped['fname_eng']}',
                        @lname_eng = '{row_escaped['lname_eng']}',
                        @USR_EMAIL = '{row_escaped['USR_EMAIL']}',
                        @nickname_eng = '{row_escaped['nickname_eng']}',
                        @OperationType = 'A'
                ) BY DB_CONN;
                DISCONNECT FROM DB_CONN;
            QUIT;
            """
            print(sp_call)
           
            result = sas.submit(sp_call)
            if result.get('LOG'):
                print(f"Log output for row {index+1}:", result['LOG'])

        print(f"Stored procedure executed successfully for all rows in {table_name}.")
    except Exception as e:
        print(f"An error occurred while executing the stored procedure: {e}")

"""
# ===== 10. ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Execution of Import and Processing Functions) =====
"""
# Example usage:
def main_execution():
    sas = saspy.SASsession(cfgname='YOUR_SAS_CONFIG_NAME')
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SQL Server
    libname_statement = """
    LIBNAME  SQLSVR
        DATASRC=YOUR_DATABASE_CONNECTION_STRING
        SCHEMA=dbo
        AUTHDOMAIN=YOUR_AUTH_DOMAIN;
    """
    sas.submit(libname_statement)

    columns_to_select = ['EMPID', 'fname_eng', 'lname_eng', 'USR_EMAIL', 'nickname_eng']
    df_task_user = ImportDataTaskUser(sas, columns_to_select=columns_to_select)
    df_task_work = ImportDataTaskWork(sas)

    if not df_task_user.empty and not df_task_work.empty:
        df_joined = pd.merge(df_task_work, df_task_user, how='inner', left_on='Owner', right_on='EMPID')
        print(df_joined)
       
        create_sql_table_from_df(sas, df_joined, 'Table_2')
    else:
        print("DataFrame ‡πÉ‡∏î‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Join ‡πÑ‡∏î‡πâ")

    sas.endsas()

# Uncomment the line below to run the main execution
# main_execution()

"""
# ===== 11. ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ IDSmartcare (Import Data with IDSmartcare) =====
"""
import saspy
import pandas as pd
import traceback
import warnings

warnings.filterwarnings('ignore', category=UserWarning)

def ImportDataWithIDSmartcare(sas):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á LIBNAME statement ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SQL Server
        libname_stmt = """
        LIBNAME SQLDB SQLSVR
        DATASRC=
        SCHEMA=dbo
        AUTHDOMAIN=;
        """
        sas.submit(libname_stmt)

        # Query ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á Tasklist_Incentive_FullDataEmp
        query = """
        PROC SQL;
            CREATE TABLE work.temp_data AS
            SELECT *
            FROM SQLDB.Tasklist_Incentive_FullDataEmp;
        QUIT;
        """
        sas.submit(query)

        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SAS dataset ‡πÄ‡∏õ‡πá‡∏ô Pandas DataFrame
        df = sas.sasdata2dataframe(table='temp_data', libref='work')

        return df
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        traceback.print_exc()
        return pd.DataFrame()

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SAS
sas = saspy.SASsession(cfgname='winiomwin')

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df_part1 = ImportDataWithIDSmartcare(sas)

# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Owner ‡πÅ‡∏•‡∏∞ IDsmartcare ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
if not df_part1.empty:
    owners = df_part1['Owner'].unique()
    IDsmartcare = df_part1['IDsmartcare'].unique()
    print("Unique Owners:", owners)
    print("Unique IDsmartcare:", IDsmartcare)
else:
    print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SAS
sas.endsas()

"""
# ===== 12. ‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQL Server ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (Direct SQL Server Import and Processing) =====
"""
import pandas as pd
import pyodbc
import traceback
import warnings
warnings.filterwarnings('ignore', category=UserWarning)

def ImportAcceptTaskName(owners, IDsmartcare):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á connection string ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SQL Server
        conn_str = f"DRIVER={{SQL Server}};SERVER={CONFIG2['server']};DATABASE={CONFIG2['database']};UID={CONFIG2['username']};PWD={CONFIG2['password']}"
       
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        with pyodbc.connect(conn_str) as conn:
            cursor = conn.cursor()
           
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ Owner ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á AcceptTask_Name
            # ‡πÅ‡∏õ‡∏•‡∏á Owner ‡πÄ‡∏õ‡πá‡∏ô VARCHAR ‡πÉ‡∏ô SQL
            placeholders = ', '.join('CAST(? AS VARCHAR(50))' for _ in owners)
            query = f"""
            SELECT DISTINCT AcceptTask_Name
            FROM DASHBOARD_SMARTCARE
            WHERE AcceptTask_By IN ({placeholders})
            """
            cursor.execute(query, tuple(owners))
           
            # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á list ‡∏Ç‡∏≠‡∏á AcceptTask_Name
            accept_task_names = [row.AcceptTask_Name for row in cursor.fetchall()]
            unique_values = list(set(accept_task_names))  # ‡πÉ‡∏ä‡πâ set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ unique
            print("Unique AcceptTask_Name:", unique_values)
           
            if unique_values:
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á
                placeholders_unique = ', '.join('?' for _ in unique_values)
                placeholders_idsmartcare = ', '.join('?' for _ in IDsmartcare if pd.notna(_))
               
                query = f"""
                SELECT TicketId, Description, AcceptTask_By, AcceptTask_Name, AcceptTask_TEAM, CreateDate
                FROM DASHBOARD_SMARTCARE
                WHERE Status = 'Waiting for Resolve'
                AND AcceptTask_Name IN ({placeholders_unique})
                """
               
                params = unique_values
               
                if placeholders_idsmartcare:
                    query += f"AND TicketId NOT IN ({placeholders_idsmartcare})"
                    params.extend([id for id in IDsmartcare if pd.notna(id)])
               
                # Execute query
                cursor.execute(query, params)
               
                # ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame
                columns = [column[0] for column in cursor.description]
                results = [list(row) for row in cursor.fetchall()]
                df_final = pd.DataFrame(results, columns=columns)
                return df_final
            else:
                print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡πà‡∏≤ AcceptTask_Name ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô")
                return pd.DataFrame()
    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        traceback.print_exc()
        return pd.DataFrame()


CONFIG2 = {
    'server': '',
    'database': '',
    'line_token': '',
    'username': '',
    'password': '',
}
df_part2 = ImportAcceptTaskName(owners,IDsmartcare)
print(df_part2)

"""
# ===== 13. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Create and Insert Data to Database) =====
"""
def CreateAndInsertData(sas, df_part2):
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á LIBNAME statement ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö SQL Server
        libname_stmt = """
        LIBNAME SQLDB SQLSVR
        DATASRC=
        SCHEMA=dbo
        AUTHDOMAIN=;
        """
        sas.submit(libname_stmt)

        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô string (VARCHAR) ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ NULL
        for col in df_part2.columns:
            df_part2[col] = df_part2[col].astype(str).replace('nan', 'NULL')
           
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CreateDate ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏Ñ‡πà‡∏≤ NULL ‡πÑ‡∏ß‡πâ
        df_part2['CreateDate'] = df_part2['CreateDate'].replace('NULL', None)

        print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô VARCHAR ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ NULL:")
        print(df_part2.head())
        print(df_part2.dtypes)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DataFrame ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if df_part2.empty:
            print("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞ insert ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return

        print(f"Total rows in DataFrame: {len(df_part2)}")

        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ stored procedure ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô
        delete_call = """
        PROC SQL;
            CONNECT TO SQLSVR AS SQLDB (DATASRC= AUTHDOMAIN=mssqlauth);
            EXECUTE (
                EXEC dbo.sp_UpdateTask_Incentive @OperationType = 'D'
            ) BY SQLDB;
            DISCONNECT FROM SQLDB;
        QUIT;
        """
        sas.submit(delete_call)
        print("‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

        # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        for index, row in df_part2.iterrows():
            print(f"Inserting row {index+1}/{len(df_part2)}")

            # Escape single quotes in string values ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤ NULL
            row = row.apply(lambda x: 'NULL' if x is None else str(x).replace("'", "''"))

            create_date_value = 'NULL' if row['CreateDate'] is None else f"'{row['CreateDate']}'"

            sp_call = f"""
            PROC SQL;
                CONNECT TO SQLSVR AS SQLDB (DATASRC= AUTHDOMAIN=mssqlauth);
                EXECUTE (
                    EXEC dbo.sp_UpdateTask_Incentive
                        @TicketId = '{row['TicketId']}',
                        @Description = '{row['Description']}',
                        @AcceptTask_By = '{row['AcceptTask_By']}',
                        @AcceptTask_Name = '{row['AcceptTask_Name']}',
                        @AcceptTask_TEAM = '{row['AcceptTask_TEAM']}',
                        @CreateDate = {create_date_value},
                        @OperationType = 'B'
                ) BY SQLDB;
                DISCONNECT FROM SQLDB;
            QUIT;
            """
            result = sas.submit(sp_call)
            if result.get('LOG'):
                print(f"Log output for row {index+1}:", result['LOG'])

        print("Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    except Exception as e:
        print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        traceback.print_exc()
"""
# ===== 14. ‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏ö‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô SAS =====
"""
# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SAS (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á)
sas = saspy.SASsession(cfgname='winiomwin')

# ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞ insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
if not df_part2.empty:
    CreateAndInsertData(sas, df_part2)
else:
    print("df_part2 ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (empty)")

# ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ SAS
sas.endsas()
"""
# ===== 15. ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel =====
"""
import pandas as pd
import openpyxl

# ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel
files = {
    # 'file1': 'path_to_file1.xlsx',
    # 'file2': 'path_to_file2.xlsx',
    # 'file3': 'path_to_file3.xlsx'
}

# Loop ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
for file_name, file_path in files.items():
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Excel ‡πÑ‡∏ü‡∏•‡πå
    df_excel = pd.read_excel(file_path)

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô 'Owner' ‡πÅ‡∏•‡∏∞ 'AcceptTask_By' ‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    df_excel['Owner'] = df_excel['Owner'].astype(str).str.strip()
    df_part2['AcceptTask_By'] = df_part2['AcceptTask_By'].astype(str).str.strip()

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Owner ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞ df_part2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Owner ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå:", df_excel['Owner'].tolist())
    print("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô df_part2:", df_part2)

    # ‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å df_part2 ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Owner ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
    matching_rows = df_part2[df_part2['AcceptTask_By'].isin(df_excel['Owner'])]

    if not matching_rows.empty:
        # ‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏î‡πâ‡∏ß‡∏¢ openpyxl ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        book = openpyxl.load_workbook(file_path)
        sheet = book.active

        # ‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏õ
        for _, row in matching_rows.iterrows():
            for i in range(1, sheet.max_row + 2):  # +2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡πÉ‡∏´‡∏°‡πà‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ
                if sheet.cell(row=i, column=3).value is None:  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏ñ‡∏ß‡∏ô‡∏µ‡πâ‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    # sheet.cell(row=i, column=2).value = "Smartcare"
                    sheet.cell(row=i, column=3).value = f"{row['TicketId']} + {row['Description']}"
                    # sheet.cell(row=i, column=5).value = "New"
                    # sheet.cell(row=i, column=6).value = row['AcceptTask_By']
                    break

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel
        book.save(file_path)
        print(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {file_name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")

    else:
        print(f"‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå {file_name}")
"""
# ===== 16. ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô=====
"""
send_line_notification(CONFIG['line_token'], message="üéâ‚úÖüèÜ --- End of all user notifications --- üèÜ‚úÖüéâ")
